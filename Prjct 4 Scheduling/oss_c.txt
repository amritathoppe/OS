#include "header.h"

PCB queue[MAX_CHILD]; //lower index means low priority queue
PCB pcb[MAX_CHILD];
sem_t *parent_sem;
sem_t *child_sem[MAX_CHILD];


void* shmem[MAX_CHILD];
char buffer[2048];

int terminate_process = 0;
int process_index_counter = 0;

void *process_state(void *vargp)//Identifies the process state
{
        int childCount = 0;
        PCB *pcb = NULL;
        void *child_shmem;
        int fd;
        while(1) {
                if(terminate_process){
                        break;
                }
                for (childCount = 0; childCount < MAX_CHILD; childCount++) {
                        fd = get_file_descriptor(sizeof(PCB), childCount);
                        child_shmem = get_shared_memory(sizeof(PCB), childCount, fd);

                        pcb = (PCB *)child_shmem;

                        close(fd);
                }
                usleep(500000);
        }
}

int create_child(int child_index){

        pid_t pid;
        char index[20];
        memset(index, '\0', sizeof(index));
        sprintf(index, "%d", child_index);

        pid = fork();
        switch(pid){
                case -1:
                                return -1;
                case 0:

                        execl(CHILD_EXE, CHILD_EXE, index, NULL);
                default:
                        return pid;
        }
        return -1;
}

void perform_scheduling()
{
        int childCount = 0;
        PCB *pcb = NULL;
        void *child_shmem;
        int will_schedule = 1;
        int fd;
        char temp[50];
        long long startTime;
        long long endTime;
        pid_t pid;
        int queue_idx;

        while(will_schedule) { //process scheduling algm
                will_schedule = 0;
                for (childCount = 0; childCount < MAX_CHILD; childCount++) {
                        if(terminate_process){
                                return;
                        }

                        fd = get_file_descriptor(sizeof(PCB), childCount);
                        child_shmem = get_shared_memory(sizeof(PCB), childCount, fd);

                        pcb = (PCB *)child_shmem;

                        if(strcmp(pcb->state, "finished") != 0) {


                                memset(buffer, '\0', sizeof(buffer));

                                sprintf(buffer, "OSS: Dispatching process with PID %lld from queue %d at time 0:%lld", pcb->pid, pcb->process_priority + 1, current_timestamp());
                                write_log(buffer);

                                startTime = current_timestamp();
                                sem_wait(parent_sem);

                                will_schedule = 1;

                                endTime = current_timestamp();
                                sem_post(child_sem[childCount]);

                                memset(buffer, '\0', sizeof(buffer));
                                sprintf(buffer, "OSS: total time this dispatch was %lld milliseconds", (endTime - startTime));
                                write_log(buffer);

                                memset(buffer, '\0', sizeof(buffer));
                                sprintf(buffer, "OSS: Receiving that process with PID %lld ran for %lld milliseconds", pcb->pid, pcb->last_burst_time);
                                write_log(buffer);

                                memset(buffer, '\0', sizeof(buffer));

                                if(pcb->process_criteria == TERMINATE_PROCESS) {
                                        sprintf(buffer, "abrupt termination");
                                } else if(pcb->process_criteria == TERMINATE_AT_QUANTUM) {
                                        sprintf(buffer, "used entire quantum");
                                } else if(pcb->process_criteria == WAIT_FOR_EVENT) {
                                        sprintf(buffer, "waited for event and then used quantum");
                                } else if(pcb->process_criteria == PREEMPT) {
                                        sprintf(buffer, "getting preempted");
                                }

                                write_log(buffer);
                        } else {
                                if(terminate_process){
                                        return;
                                }

                                pid = create_child(childCount);

                                if(pid != -1) {
                                        pcb[childCount].process_index = process_index_counter;
                                        process_index_counter++;
                                        pcb[childCount].pid = pid;
                                        pcb[childCount].total_cpu_time = uniform_distribution(0, MAX_CPU_TIME);
                                        pcb[childCount].process_priority = uniform_distribution(0, TOTAL_QUEUE - 1);

                                        queue_idx = pcb[childCount].process_priority;

                                        pcb[childCount].quantum = QUANTUM/(queue_idx + 1);
                                        strcpy(pcb[childCount].state, "new");

                                        memset(temp, '\0', sizeof(temp));
                                        memset(buffer, '\0', sizeof(buffer));

                                        if(queue_idx == 0){
                                                strcpy(temp, "Low priority");
                                        } else {
                                                strcpy(temp, "High priority");
                                        }
                                        sprintf(buffer, "OSS: Generating process with index %d and PID %lld (%s) and putting it in queue %d at time 0:%lld", pcb[childCount].process_index, pid, temp, queue_idx + 1, current_timestamp());
                                        write_log(buffer);
                                        queue[childCount] = pcb[childCount];

                                        memcpy(shmem[childCount], &pcb[childCount], sizeof(PCB));
                                }

                        }
                        close(fd);
                }
        }
}

void print_summary()
{
        int childCount = 0;
        PCB *pcb = NULL;
        void *child_shmem;
        int fd;
        int total_burst=0;
        int total_turnaround=0;
        int total_wait=0;

        for (childCount = 0; childCount < MAX_CHILD; childCount++) {
                fd = get_file_descriptor(sizeof(PCB), childCount);
                child_shmem = get_shared_memory(sizeof(PCB), childCount, fd);

                pcb = (PCB *)child_shmem;

               // memset(buffer, '\0', sizeof(buffer));
                //sprintf(buffer, "OSS: Process PID %lld Burst Time: %lld Turn Around Time: %lld Wait Time: %lld", pcb->pid, pcb->total_cpu_time, pcb->total_system_time, pcb->total_wait_time);
               // write_log(buffer);
                total_burst+=pcb->total_cpu_time;
                total_turnaround+=pcb->total_system_time;
                total_wait+=pcb->total_wait_time;
        }
        printf("\nTotal Turn Around %d,Total Burst Time %d Total wait time %d",(total_burst),total_turnaround,total_wait);
        printf("\n Child Count : %d",childCount);
        printf("\nCPU Average Turn Around Time: %d, CPU Average Burst Time: %d,CPU Average Wait Time: %d\n",(total_burst/childCount),(total_turnaround/childCount),(total_wait/childCount));

}

void signal_child()//For killing child
{
        int childCount = 0;
        PCB *pcb = NULL;
        void *child_shmem;
        int fd;

        for (childCount = 0; childCount < MAX_CHILD; childCount++) {
                fd = get_file_descriptor(sizeof(PCB), childCount);
                child_shmem = get_shared_memory(sizeof(PCB), childCount, fd);

                pcb = (PCB *)child_shmem;
                kill(pcb->pid, SIGINT);
        }
}
void clean_semaphore()//for closing opened semaphore
{
        int childCount = 0;
        char child_sem_name[50];

        sem_unlink("parent_sem");

        for (childCount = 0; childCount < MAX_CHILD; childCount++) {
                memset(child_sem_name, '\0', sizeof(child_sem_name));
                sprintf(child_sem_name, "child4_%d_sem", childCount);

                sem_unlink(child_sem_name);
        }
}

void cleanup()
{
        int childCount = 0;
        printf("Cleaning memory\n");
        for (childCount = 0; childCount < MAX_CHILD; childCount++) {
                munmap(shmem[childCount], sizeof(PCB));
        }

        clean_semaphore();
}
void signal_handler_func(int signum)//For Signal Handling
{
        signal(SIGINT, signal_handler_func);
        printf("\n Ctrl + c is pressed\n");
        printf("Cleanup initiated\n");
        terminate_process = 1;
        signal_child();
        print_summary();
        cleanup();
        exit(0);

}

void signal_alarm(int signum)//For Signal Alarm
{
        signal(SIGALRM, signal_alarm);
        printf("\n Alarm  is called\n");
        terminate_process = 1;
        signal_child();
        print_summary();
        cleanup();
        exit(0);
}
int main(int argc, char *argv[])
{
        clean_semaphore();
        signal(SIGINT,signal_handler_func);
        signal(SIGALRM,signal_alarm);
        alarm(2);
        output_file = NULL;
        initialise_rand();
        int childCount = 0;
        pid_t pid;
        int queue_idx;
        pthread_t thread_id;
        char child_sem_name[50];
        char temp[50];

        parent_sem = sem_open("parent_sem", O_CREAT , (S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP), 1);//create parent semaphore
        sem_close(parent_sem);
        parent_sem = sem_open("parent_sem", O_RDWR);//open semaphore

        memset(buffer, '\0', sizeof(buffer));

        for (childCount = 0; childCount < MAX_CHILD; childCount++) {
                shmem[childCount] = create_shared_memory(sizeof(PCB), childCount);
                memset(child_sem_name, '\0', sizeof(child_sem_name));//mapping the shared memory
                sprintf(child_sem_name, "child4_%d_sem", childCount);
                child_sem[childCount] = sem_open(child_sem_name, O_CREAT , (S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP), 0);
                sem_close(child_sem[childCount]);
                child_sem[childCount] = sem_open(child_sem_name, O_RDWR);

                pid = create_child(childCount);

                if(pid != -1) {
                        pcb[childCount].process_index = process_index_counter;
                        process_index_counter++;


                        pcb[childCount].pid = pid;
                        pcb[childCount].total_cpu_time = uniform_distribution(0, MAX_CPU_TIME);//generates CPU TIME
                        pcb[childCount].process_priority = uniform_distribution(0, TOTAL_QUEUE - 1);//generates Process priority

                        queue_idx = pcb[childCount].process_priority;

                        pcb[childCount].quantum = QUANTUM/(queue_idx + 1);
                        strcpy(pcb[childCount].state, "new");

                        memset(temp, '\0', sizeof(temp));
                        memset(buffer, '\0', sizeof(buffer));
                        if(queue_idx == 0){
                                strcpy(temp, "Low priority");
                        } else {
                                strcpy(temp, "High priority");
                        }
                        sprintf(buffer, "OSS: Generating process with index %d and  PID %lld (%s) and putting it in queue %d at time 0:%lld", pcb[childCount].process_index, pid, temp, queue_idx + 1, current_timestamp());
                        write_log(buffer);
                        queue[childCount] = pcb[childCount];

                        memcpy(shmem[childCount], &pcb[childCount], sizeof(PCB));
                }
        }

        pthread_create(&thread_id, NULL, process_state, NULL);
        perform_scheduling();

        wait(NULL);
        sleep(3);
        return 1;
}
