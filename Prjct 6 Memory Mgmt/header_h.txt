#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <sys/wait.h>
#include <semaphore.h>
#include <sys/mman.h>
#include <time.h>
#include <sys/time.h>
#include <fcntl.h>
#include <pthread.h>
#include <sys/ipc.h>
#include <sys/shm.h>


#define MAX_CHILD 18
#define MAX_RESOURCE 20
#define CHILD_EXE "./user"
#define PAGE_SIZE 1
#define MAX_PROCESS_MEMORY 32
#define PAGE_TABLE_SIZE 32
#define MEMORY_LIMIT 256
#define MAX_LOG_LINE 8000


#define RUN_TIME_SECONDS 2


FILE *output_file;
const char *outfile = "output.log";
struct timespec mainStartTime;
void* clock_mem;
int CLOCK_DESCRIPTOR, max_child;
char buffer[4096];

typedef struct {
        long long int seconds;
        long long int nanoseconds;
} CLOCK;

CLOCK *new_time;

typedef struct {
        int refrenced_by;
        int second_chance;
        int dirtyBit;
        int page_index;
} PAGE_TABLE;

typedef struct {
        int ref_type; //0: READ 1: WRITE
        int page_index;
        int is_new; //0: fulfilled 1: new
        int terminate;
} REFERENCE_DETAIL;

PAGE_TABLE page_table[PAGE_TABLE_SIZE];
int page_queue_index;
int log_line;

void write_log(char *log)
{
        if(output_file == NULL)
        {
                if((output_file=fopen(outfile,"w+"))==NULL)
                {
                        perror("\n OSS :fopen failure...sending kill signals");
                }
                else printf("Fopen successfull\n");
        }

        if(output_file != NULL && log_line < MAX_LOG_LINE)
        {
                fprintf(output_file, log);
                fprintf(output_file, "\n");
                fflush(output_file);
                log_line++;
        }
}

void write_log_forced(char *log)
{
        if(output_file == NULL)
        {
                if((output_file=fopen(outfile,"w+"))==NULL)
                {
                        perror("\n OSS :fopen failure...sending kill signals");
                }
                else printf("Fopen successfull\n");
        }

        if(output_file != NULL)
        {
                fprintf(output_file, log);
                fprintf(output_file, "\n");
                fflush(output_file);
                log_line++;
        }
}


void print_memory_map()
{
        memset(buffer, '\0', sizeof(buffer));
        char temp[4];
        int i = 0;
        sprintf(buffer, "\n\nCurrent memory layout at time %lld:%lld is:\n\n", new_time->seconds, new_time->nanoseconds);
        for(i = 0; i < PAGE_TABLE_SIZE; i++) {
                if(page_table[i].refrenced_by == -1){
                        strcat(buffer, ".");
                } else if(page_table[i].dirtyBit == 1){
                        strcat(buffer, "D");
                }else{
                        strcat(buffer, "U");
                }
        }
        strcat(buffer, "\n");
        for(i = 0; i < PAGE_TABLE_SIZE; i++) {
                if(page_table[i].refrenced_by == -1){
                        strcat(buffer, ".");
                        printf(".");
                }else{
                        memset(temp, '\0', sizeof(temp));
                        sprintf(temp, "%d", page_table[i].second_chance);
                        strcat(buffer, temp);
                }
        }
        write_log(buffer);
}

void initialise_page_table()
{
        int i = 0;
        for(i = 0; i < PAGE_TABLE_SIZE; i++)
        {
                page_table[i].refrenced_by = -1;
                page_table[i].second_chance = 0;
                page_table[i].dirtyBit = 0;
                page_table[i].page_index = -1;
        }
}

void increment_page_queue()
{
        page_queue_index = (page_queue_index + 1) % PAGE_TABLE_SIZE;
}

int page_index_minus()
{
        if(page_queue_index == 0) {
                return PAGE_TABLE_SIZE - 1;
        } else {
                return page_queue_index - 1;
        }
}

void initialise_rand() {
        struct timespec ts;
        clock_gettime(CLOCK_MONOTONIC, &ts);
        srand((time_t)ts.tv_nsec);
        clock_gettime(CLOCK_MONOTONIC, &mainStartTime);
}


int uniform_distribution(int rangeLow, int rangeHigh) {
        double myRand = rand()/(1.0 + RAND_MAX);
        int range = rangeHigh - rangeLow + 1;
        int myRand_scaled = (myRand * range) + rangeLow;
        return myRand_scaled;
}


int get_file_descriptor(size_t size, int index) {
        char file_name[50];
        memset(file_name, '\0', sizeof(file_name));
        sprintf(file_name, "memory_%d", index);
        int memFd = shm_open(file_name, O_RDWR | O_CREAT, S_IRWXU );
        if (memFd == -1)
        {
                perror("Can't open file");
                return -1;
        }

        int res = ftruncate(memFd, size);
        if (res == -1)
        {
                perror("Can't truncate file");
                return -1;
        }

        return memFd;
}

void *get_shared_memory(size_t size, int index) {
        int memFd;
        memFd = get_file_descriptor(size, index);

        void *buffer = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, memFd, 0);
        if (buffer == NULL)
        {
                perror("Can't mmap");
                return NULL;
        }

        return buffer;
}



long long current_timestamp() {
        struct timespec te;
        clock_gettime(CLOCK_MONOTONIC, &te);
        long long milliseconds = (te.tv_nsec - mainStartTime.tv_nsec);
        return milliseconds;
}

CLOCK *get_time()
{
        return new_time;
}

CLOCK *incrementClock(CLOCK *clock, long long int nanoSeconds) {
        long long int temp = 0;
        if(clock->nanoseconds + nanoSeconds >= 1000000000 ) {
                temp = clock->nanoseconds + nanoSeconds;
                clock->seconds += (temp / 1000000000);
                clock->nanoseconds += (temp % 1000000000);
        } else {
                clock->nanoseconds += nanoSeconds;
        }
        return clock;
}

CLOCK addNanoSeconds(long int ns)
{
        CLOCK *old_time = get_time(), send_time;
        old_time = incrementClock(old_time, ns);
        new_time->seconds = old_time->seconds;
        new_time->nanoseconds = old_time->nanoseconds;
        send_time.seconds = new_time->seconds;
        send_time.nanoseconds = new_time->nanoseconds;

        return send_time;
}

CLOCK addMilliSeconds(long int ms)
{
        CLOCK *old_time = get_time(), send_time;
        old_time = incrementClock(old_time, 1000000 * ms);
        new_time->seconds = old_time->seconds;
        new_time->nanoseconds = old_time->nanoseconds;

        send_time.seconds = new_time->seconds;
        send_time.nanoseconds = new_time->nanoseconds;

        return send_time;
}


void init_timer()
{
        new_time = (CLOCK *)malloc(sizeof(CLOCK));
        new_time->seconds = 0;
        new_time->nanoseconds = 0;
}